{
  "hash": "113f7e05efab9567427728a80683c038",
  "result": {
    "markdown": "---\ntitle: \"Ageing Error Matrices - some notes\"\nauthor: \"MSK\"\ndate: '2023-06-08'\nslug: ageerror-notes\ncategories: []\ntags: []\nsubtitle: ''\nsummary: ''\nauthors: []\nlastmod: '2023-06-08T11:30:27-07:00'\nfeatured: yes\nimage: ageimg-jpg.jpg\n---\n\n\n\n\n# This post\nI revisit the inclusion of ageing error matrices frequently enough that I wanted to consolidate some notes here. \nNone of this is new information; it is a resource for myself to get things straight, particularly when moving between the Stock Synthesis ageing error syntax and other setups like those used in our bespoke ADMB/TMB models. For this post, $a$ will index true ages, $\\tilde a$ indexes read ages.\n\nIn this post, I will talk through the math behind the ageing error matrix, and show how one can develop such a matrix (with R code) given parameters concerning the bias and imprecision of their age reads.\n\n# Background\n\n+ Ageing error concerns the imprecision that arises from misreading the annuli of a fish's otolith. A given reader might mistakenly read an age-5 fish to be age-4 or age-6. This introduces a distortion in your observations, so we account for it within our models in hopes of lining things up with reality, given imprecision in the age-read process.\n\n+ The *mean* divergence from the true age is called the \"bias\" in the SS3 manual. Setting this to -1 or [true value]+0.5 results in identical behavior, whereby there is no bias. This assumes that, on average, the read age $\\tilde a$  would be identical to the true age $a$ .\n\n+ Even in the absence of bias, there might be a spread of imprecision in the reads ('uncertainty at age' in SS speak). This can be represented as the standard deviation of $\\tilde a$ given $a$, assuming a normal distribution. \n\n+ Since lots of annuli are generally harder to distinguish than few, we'd expect precision to decline with age (but check with your life history program to get the specifics for your species). Regardless whether this is true, we would expect bias and precision to vary with age, which is why we typically deal with a set of vectors or a matrix, with unique values for each combination of $a$, $\\tilde a$.\n\n+ A dataset might be comprised of reads from multiple readers with non-systematic bias among them, hence the need for intercalibration. Check out an example for [GOA Flathead Sole](https://mkapur-noaa.github.io/goa-fhs-2022/AgeingError_Writeup_Static.html) using the Punt et. al. (2008) approach.\n\n# Ageing Error Vector Setup (Stock Synthesis syntax)\n\nLet's pretend we're working with 10 age bins ranging from 1 to 10 years. For simplicity we will assume that the data reads are also assigned to these same bins; anything read over age 10 will be accumulated into 10+ as a plus group.\n\nI'm going to posit vectors of values like you might see in the `data.ss` file of a Stock Synthesis, continuing with the assumption that the ability to precisely read an otolith gets harder with more rings. Thus, both the bias vector and the precision vector increase as a function of $a$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbias_a <- c(1.1873,\t2.2105,\t3.23844,\t4.27116,\t5.30867,\t6.351,\t7.39816,\t8.45019,\t9.5071, 10.6357)\nsd_a <- c(\t0.001, 0.0716628,\t0.142271,\t0.212825,\t0.283324,\t0.353768,\t0.424158,\t0.494494,\t0.564775,0.635002)\npar(mfrow=c(1,2))\nplot( 1:abins,bias_a, type = 'l', xlab = 'true age', ylab = 'bias')\nplot( 1:abins, sd_a, type = 'l', xlab = 'true age', ylab = 'sd')\n```\n\n::: {.cell-output-display}\n![](2023-06-08-ageingError_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nThese plots aren't super helpful, but they give us a sense of how we'd expect the resultant matrix to behave.\n\n# Ageing Error Matrix Setup\n\nWe'll build an empty matrix $\\mathbf P$ with dims $a$ x $\\tilde a$. In practice this might be an array if you're dealing with reads from multiple labs/fleets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nP_aa <- matrix(0, nrow = abins, ncol = abins)\n```\n:::\n\n\nEach entry in $\\mathbf P$ is described as \"the probability of being read at age $\\tilde a$ given true age $a$\". If there were zero bias and zero imprecision (perfect age readers), we'd expect $\\mathbf P$ to be the identity matrix; a 100% chance that an otolith of true age 5 gets read as age 5, etc. \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    1    0    0    0    0    0    0    0    0     0\n [2,]    0    1    0    0    0    0    0    0    0     0\n [3,]    0    0    1    0    0    0    0    0    0     0\n [4,]    0    0    0    1    0    0    0    0    0     0\n [5,]    0    0    0    0    1    0    0    0    0     0\n [6,]    0    0    0    0    0    1    0    0    0     0\n [7,]    0    0    0    0    0    0    1    0    0     0\n [8,]    0    0    0    0    0    0    0    1    0     0\n [9,]    0    0    0    0    0    0    0    0    1     0\n[10,]    0    0    0    0    0    0    0    0    0     1\n```\n:::\n:::\n\n\nBut, that's rarely the case. The vectors we described above are the parameters of the (normal) distribution $\\Phi$ that underlies the assumed imprecision in ageing reads for each true age $a$, as in:\n\n$$\nP_{\\gamma,a,\\tilde a}=\n\\begin{cases}\n\\Phi  (\\theta_2 ,a, \\sigma_{a} ) & \\tilde a = 1 \\\\\n \\Phi  (\\theta_{a+1} ,a, \\sigma_{a} )-\\Phi  (\\theta_2 ,a, \\sigma_{a} ) &  1 < \\tilde a < A \\\\\n1-\\Phi  (\\theta_A ,a, \\sigma_{A} ) &  \\tilde a = A\n\\end{cases} \n$$\n\nIn this notation, $\\theta_a$\tis the lower limit of age bin $a$ and $A$ is the plus group. In words, we're asking, \"given that at true age $a$ we expect a mean observation $\\tilde a$, what is the chance of observing a value within bin $\\theta_a$ to $\\theta_{a+1}$?\n\nHere's a function that will take these arguments and return a singular probability value ($P_{a,\\tilde a}$).\nYou could also accomplish this via `dnorm()`, but note that we are using discrete bins.\n\n::: {.cell}\n\n```{.r .cell-code}\ngetP_al <- function(theta, aa, sigma, maxage){\n  pal = NA\n  if(theta == 1){\n    pal <- pnorm(theta, aa, sigma)\n  } else if (theta > 1 & theta < maxage){\n    pal <- pnorm(theta+1, aa, sigma) - pnorm(theta, aa, sigma)\n  } else if (theta == maxage){\n    pal <- 1-pnorm(theta, aa, sigma)\n  }\n  pal\n}\n```\n:::\n\n\nYou'll notice this is exactly how I calculated the probability of length-at-age in my post about converting between measurement types [here](https://mkapur.github.io/posts/2022-05-02-len-age-conv/2022-05-02-len-age-conv.html).\n\n## Populating the Matrix\n\nContinuing our example, let's pass the bias and imprecision vectors we established above to see how $\\mathbf P$ responds. I'm filling each element of $\\mathbf P$ one at a time. Sometimes you will need to make an assumption about the first age group to avoid a zero.\n\n\n::: {.cell}\n\n:::\n\n\nYou'll want to sanity check that the columns sum to one; in other words, are all possible true ages $a$ accounted for under each read age $\\tilde a$? Normalization, and occasionally some rounding to several decimals, are reasonable steps here.\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(a_obs in 1:abins){\n  P_aa[,a_obs] <- P_aa[,a_obs]/sum(P_aa[,a_obs])\n}\nall(round(colSums(P_aa))==1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nNow let's confirm that the shape of the probabilities looks reasonable. Generally, I expect to see what I call a \"slumpy worm\": values with higher, narrow peaks at early ages, slumping to flatter, shallower peaks at older ages. The slumpy worm corresponds to the notion that it's more likely for a reader to get a precise read on a young fish (it's easy to count a small handful of annuli), whereas it's harder to age an older fish (many annuli tend to get blurry and bunched up, but **check with your life history program!*).\n\nThere should be a spike at the ends for the plus group and age-0, if applicable. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2023-06-08-ageingError_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nAnd here's what the actual populated matrix looks like: \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2023-06-08-ageingError_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n# Moving Backwards\n\nWhat if you're in a situation where you've inherited a bespoke model and have the values for $\\mathbf P$ but need the vector-style inputs for Stock Synthesis?  \n\nGenerally, you can leverage the fact that the error matrix is normally distributed to back out the *approximate* mean and sd from your matrix. Even with a high number of bins this is not very precise, so the **best practice is to go back to your original data** and re-estimate the values (see the GOA FHS link [here](https://mkapur-noaa.github.io/goa-fhs-2022/AgeingError_Writeup_Static.html) for a worked example). This will require individual age-reads, will take more time, and runs the risk that your resultant bias and precision estimates aren't exactly the same as whatever was used inside your bespoke model. As an aside, this is why the SS syntax is preferable for conserving model integrity across years. If the original code to develop your bespoke matrix is lost, there really isn't a guarantee you can retrieve the parameters to re-generate it.\n\nHere's an example with a single vector of 50 age bins; you could embed this in a loop for your matrix (see below). Note that whatever imprecision occurs in the estimation of $\\mu$ will be carried forward to $\\sigma$, so we would not expect precise results. Other ideas could be bootstrapping from the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the known mean and standard deviation\nn_bins = 50\nknown_mean <- n_bins*0.45\nknown_sd <- n_bins*0.1 \n\n# Generate the probabilities from a normal distribution\nset.seed(123)  # Set seed for reproducibility\nprobs <- rnorm(n_bins, mean = known_mean, sd = known_sd)\nprobs <- probs / sum(probs)  # Normalize probabilities to sum to 1\n\n# Calculate the estimated mean and standard deviation\nmean_est <- sum(probs * (1:length(probs)))\nsd_est <- sqrt(sum(probs * ((1:length(probs)) - mean_est)^2))\n\n# Print the estimated mean and standard deviation\ncat(\"True Mean:\",known_mean, \"Estimated Mean:\", mean_est, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue Mean: 22.5 Estimated Mean: 25.43766 \n```\n:::\n\n```{.r .cell-code}\ncat(\"True SD:\",known_sd,\"Estimated Standard Deviation:\", sd_est, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue SD: 5 Estimated Standard Deviation: 14.56367 \n```\n:::\n\n```{.r .cell-code}\n# Plot the comparison\nplot(1:length(probs), probs, type = \"b\", pch = 16, col = \"blue\",\n     xlab = \"Index\", ylab = \"Probabilities\", main = \"True vs Estimated Mean and Standard Deviation\")\nabline(v = mean_est, col = \"red\", lwd = 2, lty = 2)\nabline(h = known_mean, col = \"black\", lwd = 2, lty = 2)\nlegend(\"topright\", legend = c(\"True Mean\", \"Estimated Mean\"), col = c(\"black\", \"red\"),\n       lwd = 2, lty = 2, pch = c(NA, NA), pt.bg = c(\"black\", \"red\"))\n```\n\n::: {.cell-output-display}\n![](2023-06-08-ageingError_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n \n \nHere's some code to do this within an optimization routine, but it's not perfect -- some assumptions have to be made about $\\sigma$, among other things.\n\n::: {.cell}\n\n```{.r .fold-show .cell-code}\n# Generate the probability matrix\nn_rows <- 10\nn_cols <- 10\ntrue_means <- (1:abins)+0.25  # True means for each column \ntrue_sds <- seq(0.5, 1.5, length.out = n_cols)  # True standard deviations for each column\n\nprobs <- matrix(0, nrow = n_rows, ncol = n_cols)\nfor (j in 1:n_cols) { \n  probs[, j] <- dnorm(1:n_rows, mean = true_means[j], sd = true_sds[j])\n  probs[, j] <- probs[, j] / sum(probs[, j])  # Normalize probabilities to sum to 1\n}\n\n# Estimate the means for each column\nmeans_est <- numeric(n_cols)\nfor (j in 1:n_cols) {\n  init_mean <- 0  # Initial mean value for optimization\n  \n  # Define the objective function for the current column\n  objective_col <- function(mean) { \n    random_vals <- dnorm(1:n_rows, mean = mean, sd = true_sds[j])\n    random_vals <- random_vals / sum(random_vals)\n    sum_sq_diff <- sum((probs[, j] - random_vals)^2)\n    return(sum_sq_diff)\n  }\n  \n  optim_result <- optimize(f = objective_col, interval = c(-10, 10))\n  means_est[j] <- optim_result$minimum\n}\n\n# Estimate the standard deviations for each column\nsds_est <- numeric(n_cols)\nfor (j in 1:n_cols) {\n  # Define the objective function for the current column\n  objective_sd <- function(sd) {\n    random_vals <- dnorm(1:n_rows, mean = means_est[j], sd = sd)\n    random_vals <- random_vals / sum(random_vals)\n    sum_sq_diff <- sum((probs[, j] - random_vals)^2)\n    return(sum_sq_diff)\n  }\n  \n  optim_result_sd <- optimize(f = objective_sd, interval = c(0, 10), maximum = FALSE)\n  sds_est[j] <- optim_result_sd$minimum\n}\n\n# Print the estimated means and standard deviations\nrbind(means_est, true_means)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               [,1]     [,2]     [,3]     [,4]     [,5]    [,6]     [,7] [,8]\nmeans_est  1.250016 2.249981 3.250001 4.250001 5.250003 6.25002 7.249997 8.25\ntrue_means 1.250000 2.250000 3.250000 4.250000 5.250000 6.25000 7.250000 8.25\n               [,9]     [,10]\nmeans_est  9.250002  9.999926\ntrue_means 9.250000 10.250000\n```\n:::\n\n```{.r .fold-show .cell-code}\nrbind(sds_est, true_sds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              [,1]      [,2]      [,3]      [,4]      [,5]     [,6]     [,7]\nsds_est  0.4999724 0.6111238 0.7222188 0.8333514 0.9444489 1.055568 1.166661\ntrue_sds 0.5000000 0.6111111 0.7222222 0.8333333 0.9444444 1.055556 1.166667\n             [,8]     [,9]    [,10]\nsds_est  1.277761 1.388888 1.351293\ntrue_sds 1.277778 1.388889 1.500000\n```\n:::\n\n```{.r .fold-show .cell-code}\npar(mfrow = c(1, 2))\n\n# Plot true vs estimated means\nplot(1:n_cols, true_means, type = \"l\", col = \"black\", lwd = 2,\n     ylim = c(min(true_means, means_est, na.rm = TRUE) - 1, max(true_means, means_est, na.rm = TRUE) + 1),\n     xlab = \"Column\", ylab = \"Mean\", main = \"True vs Estimated Means\")\npoints(1:n_cols, means_est, col = \"blue\", pch = 16)\nlegend(\"topright\", legend = c(\"True\", \"Estimated\"), col = c(\"black\", \"blue\"), lwd = 2, pch = 16)\n\n# Plot true vs estimated standard deviations\nplot(1:n_cols, true_sds, type = \"l\", col = \"black\", lwd = 2,\n     ylim = c(min(true_sds, sds_est, na.rm = TRUE) - 0.5, max(true_sds, sds_est, na.rm = TRUE) + 0.5),\n     xlab = \"Column\", ylab = \"Standard Deviation\", main = \"True vs Estimated Standard Deviations\")\npoints(1:n_cols, sds_est, col = \"blue\", pch = 16)\nlegend(\"topright\", legend = c(\"True\", \"Estimated\"), col = c(\"black\", \"blue\"), lwd = 2, pch = 16)\n```\n\n::: {.cell-output-display}\n![](2023-06-08-ageingError_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "2023-06-08-ageingError_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
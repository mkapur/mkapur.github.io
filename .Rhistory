vcov[1,2] <- -0.2
sim <- MASS::mvrnorm(1000, mu_theta, vcov)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K')
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
vcov[1,2] <- -20
sim <- MASS::mvrnorm(1000, mu_theta, vcov)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K')
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
vcov[1,2] <- -5
sim <- MASS::mvrnorm(1000, mu_theta, vcov)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K')
vcov
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
# vcov[1,2] <- -5
sim <- MASS::mvrnorm(1000, mu_theta, vcov)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K')
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
vcov[2,1] <- 2
sim <- MASS::mvrnorm(1000, mu_theta, vcov)
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
vcov[2,1] <- 0.2
sim <- MASS::mvrnorm(1000, mu_theta, vcov)
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
vcov[2,1] <- -0.2
sim <- MASS::mvrnorm(1000, mu_theta, vcov)
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
vcov[1,2] <- -1.5
sim <- MASS::mvrnorm(1000, mu_theta, vcov)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K')
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
vcov[1,2] <-vcov[2,1] <- -1.5
sim <- MASS::mvrnorm(1000, mu_theta, vcov)
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
vcov[1,2] <-vcov[2,1] <- -1.5
vcov[1,3] <-vcov[3,1] <- -1.5
sim <- MASS::mvrnorm(1000, mu_theta, vcov)
matrix(c(60,32,-4,32,30,0,-4,0,80), byrow = TRUE)
matrix(c(60,32,-4,32,30,0,-4,0,80), byrow = TRUE, ncol = 3)
vcov <- matrix(c(60,32,-4,32,30,0,-4,0,80), byrow = TRUE, ncol = 3)
sim <- MASS::mvrnorm(1000, mu_theta, vcov)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K')
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
vcov[1,2] <-vcov[2,1] <- -1.5
vcov[1,3] <-vcov[3,1] <- -1.5
vcov <- matrix(c(0.05,32,-4,32,0.05,0,-4,0,0.2), byrow = TRUE, ncol = 3)
sim <- MASS::mvrnorm(1000, mu_theta, vcov)
0.05/60
vcov <- 0.0008333333*matrix(c(60,32,-4,32,30,0,-4,0,80), byrow = TRUE, ncol = 3)
sim <- MASS::mvrnorm(1000, mu_theta, vcov)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K')
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
vcov <- 0.0008333333*matrix(c(60,-4,32,-4,30,0,32,0,80), byrow = TRUE, ncol = 3)
sim <- MASS::mvrnorm(1000, mu_theta, vcov)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K')
sim <- MASS::mvrnorm(1e4, mu_theta, vcov)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K')
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
# Define the variances
var1 <- 5^2
var2 <- 0.3^2
var3 <- (-0.5)^2
# Define the covariances
cov12 <- -sqrt(var1 * var2) * 0.9  # Strong negative correlation
cov13 <- sqrt(var1 * var3) * 0.2   # Weak positive correlation
cov23 <- sqrt(var2 * var3) * 0.2   # Weak positive correlation
# Construct the variance-covariance matrix
vcov_matrix <- matrix(c(var1, cov12, cov13,
cov12, var2, cov23,
cov13, cov23, var3), nrow = 3, byrow = TRUE)
# Print the matrix
print(vcov_matrix)
sim <- MASS::mvrnorm(1e4, mu_theta, vcov_matrix)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K')
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
# Define the variances of each parameter
var1 <- 0.05
var2 <- 0.05
var3 <- 0.2
# Define the covariances
cov12 <- -sqrt(var1 * var2) * 0.9  # Strong negative correlation
cov13 <- sqrt(var1 * var3) * 0.2   # Weak positive correlation
cov23 <- sqrt(var2 * var3) * 0.2   # Weak positive correlation
# Construct the variance-covariance matrix
vcov_matrix <- matrix(c(var1, cov12, cov13,
cov12, var2, cov23,
cov13, cov23, var3), nrow = 3, byrow = TRUE)
# Print the matrix
print(vcov_matrix)
sim <- MASS::mvrnorm(1e4, mu_theta, vcov_matrix)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K')
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
# Define the variances of each parameter
var1 <- 0.05
var2 <- 0.05
var3 <- 0.2
# Define the covariances
cov12 <- sqrt(var1 * var2) * -0.6  #  negative correlation
cov13 <- sqrt(var1 * var3) * 0.1   # Weak positive correlation
cov23 <- sqrt(var2 * var3) * 0.1   # Weak positive correlation
# Construct the variance-covariance matrix
vcov_matrix <- matrix(c(var1, cov12, cov13,
cov12, var2, cov23,
cov13, cov23, var3), nrow = 3, byrow = TRUE)
# Print the matrix
print(vcov_matrix)
sim <- MASS::mvrnorm(1e4, mu_theta, vcov_matrix)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K')
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K', pch = 16)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K', pch = 16, alpha = 0.2)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K', pch = 16, col = alpha('black', 0.4)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K', pch = 16, col = alpha('black', 0.4))
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K', pch = 16, col = scales::alpha('black', 0.4))
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K', pch = 16, col = scales::alpha('black', 0.2))
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
# Define the variances of each parameter
var1 <- 0.05
var2 <- 0.05
var3 <- 0.2
# Define the covariances
cov12 <- sqrt(var1 * var2) * -0.6  #  negative correlation
cov13 <- sqrt(var1 * var3) * 0.1   # Weak positive correlation
cov23 <- sqrt(var2 * var3) * 0.1   # Weak positive correlation
# Construct the variance-covariance matrix
vcov_matrix <- matrix(c(var1, cov12, cov13,
cov12, var2, cov23,
cov13, cov23, var3), nrow = 3, byrow = TRUE)
# Print the matrix
print(vcov_matrix)
sim <- MASS::mvrnorm(1e3, mu_theta, vcov_matrix)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K', pch = 16, col = scales::alpha('black', 0.2))
## generate the associated curves
waa <- function(winf, k, t0){
waa = apply(1:20, winf*(1-exp(-k*(age-t0))))
}
waa(winf=1,k = 2, t0 =0)
## generate the associated curves
waa <- function(winf, k, t0){
waa = apply(1:20, FUN = function(x) winf*(1-exp(-k*(x-t0))))
}
waa(winf=1,k = 2, t0 =0)
winf = 1
k = 2
t0 = 0
apply(1:20, FUN = function(x) winf*(1-exp(-k*(x-t0))))
1:20
winf*(1-exp(-k*(x-t0)))
winf*(1-exp(-k*(1:20-t0)))
## generate the associated curves for ages 1:10
waa <- function(winf, k, t0){
waa
}
## generate the associated curves for ages 1:10
waa <- function(winf, k, t0){
waa <- winf*(1-exp(-k*(1:10-t0)))
}
waa
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
# Define the variances of each parameter
var1 <- 0.05
var2 <- 0.05
var3 <- 0.2
# Define the covariances
cov12 <- sqrt(var1 * var2) * -0.6  #  negative correlation
cov13 <- sqrt(var1 * var3) * 0.1   # Weak positive correlation
cov23 <- sqrt(var2 * var3) * 0.1   # Weak positive correlation
# Construct the variance-covariance matrix
vcov_matrix <- matrix(c(var1, cov12, cov13,
cov12, var2, cov23,
cov13, cov23, var3), nrow = 3, byrow = TRUE)
# Print the matrix
# print(vcov_matrix)
## simulate random draws of the parameters
sim <- MASS::mvrnorm(1e3, mu_theta, vcov_matrix)
## generate the associated curves for ages 1:10
waa <- function(winf, k, t0){
waa <- winf*(1-exp(-k*(1:10-t0)))
}
apply(sim,2,waa)
## generate the associated curves for ages 1:10
waa <- function(pars){
winf = pars[1]
k = pars[2]
t0 = pars[3]
waa <- winf*(1-exp(-k*(1:10-t0)))
}
waa(sim[1,])
## generate the associated curves for ages 1:10
waa <- function(pars){
winf = pars[1]
k = pars[2]
t0 = pars[3]
waa <- winf*(1-exp(-k*(1:10-t0)))
return(waa)
}
waa(sim[1,])
apply(sim,2,waa)
apply(sim,1,waa)
simwaa <- apply(sim,1,waa)
dim(simwaa)
plot(simwaa[,1])
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K',
pch = 16,
main = '1000 simulated parameter draws',
col = scales::alpha('black', 0.2))
plot(type = 'n')
plot('n')
plot('n')
plot(1,type = 'n')
for(i in 1:ncol(simwaa)) lines(simwaa[,i], add = TRUE)
plot(1,type = 'n')
for(i in 1:ncol(simwaa)) lines(simwaa[,i], add = TRUE)
range(simwaa)
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
# Define the variances of each parameter
var1 <- 0.05
var2 <- 0.05
var3 <- 0.2
# Define the covariances
cov12 <- sqrt(var1 * var2) * -0.2  #  negative correlation
cov13 <- sqrt(var1 * var3) * 0.1   # Weak positive correlation
cov23 <- sqrt(var2 * var3) * 0.1   # Weak positive correlation
# Construct the variance-covariance matrix
vcov_matrix <- matrix(c(var1, cov12, cov13,
cov12, var2, cov23,
cov13, cov23, var3), nrow = 3, byrow = TRUE)
# Print the matrix
# print(vcov_matrix)
## simulate random draws of the parameters
sim <- MASS::mvrnorm(1e3, mu_theta, vcov_matrix)
## vectorized function to return the associated curves for ages 1:10
waa <- function(pars){
winf = pars[1]
k = pars[2]
t0 = pars[3]
waa <- winf*(1-exp(-k*(1:10-t0)))
return(waa)
}
simwaa <- apply(sim,1,waa)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K',
pch = 16,
main = '1000 simulated parameter draws',
col = scales::alpha('black', 0.2))
plot(1,type = 'n', ylim = c())
for(i in 1:ncol(simwaa)) lines(simwaa[,i])
plot(simwaa, xlab = 'Woo', ylab = 'K',
pch = 16,
main = '1000 simulated parameter draws',
col = scales::alpha('black', 0.2))
range(simwaa)
simwaa[,1:4]
simwaa
plot(1,type = 'n', ylim = c()); for(i in 1:10) lines(simwaa[,i])
plot(1,type = 'n', xlim = c(0,10)); for(i in 1:10) lines(simwaa[,i])
plot(1,type = 'n', xlim = c(0,10), ylim = c(0,10)); for(i in 1:10) lines(simwaa[,i])
plot(1,type = 'n', xlim = c(1,10), ylim = c(0,10)); for(i in 1:10) lines(simwaa[,i])
plot(1,type = 'n', xlim = c(1,10), ylim = c(0,10), xlab = 'age', ylab = 'weight'); for(i in 1:10) lines(simwaa[,i])
plot(1,type = 'n', xlim = c(1,10), ylim = c(0,6), xlab = 'age', ylab = 'weight'); for(i in 1:10) lines(simwaa[,i])
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
# Define the variances of each parameter
var1 <- 0.05
var2 <- 0.05
var3 <- 0.05
# Define the covariances
cov12 <- sqrt(var1 * var2) * -0.2  #  negative correlation
cov13 <- sqrt(var1 * var3) * 0.1   # Weak positive correlation
cov23 <- sqrt(var2 * var3) * 0.1   # Weak positive correlation
# Construct the variance-covariance matrix
vcov_matrix <- matrix(c(var1, cov12, cov13,
cov12, var2, cov23,
cov13, cov23, var3), nrow = 3, byrow = TRUE)
# Print the matrix
# print(vcov_matrix)
## simulate random draws of the parameters
sim <- MASS::mvrnorm(1e3, mu_theta, vcov_matrix)
## vectorized function to return the associated curves for ages 1:10
waa <- function(pars){
winf = pars[1]
k = pars[2]
t0 = pars[3]
waa <- winf*(1-exp(-k*(1:10-t0)))
return(waa)
}
simwaa <- apply(sim,1,waa)
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K',
pch = 16,
main = '1000 simulated parameter draws',
col = scales::alpha('black', 0.2))
plot(1,type = 'n', xlim = c(1,10), ylim = c(0,6), xlab = 'age', ylab = 'weight'); for(i in 1:10) lines(simwaa[,i])
plot(simwaa, xlab = 'Woo', ylab = 'K',
pch = 16,
main = '1000 simulated parameter draws',
col = scales::alpha('black', 0.2))
mu_theta <- c(5, 0.3, -0.5) ## Winf, K, t0
vcov <- diag(c(0.05, 0.05, 0.2)) # Variance-covariance of vgbm parameters (mu_theta)
# Define the variances of each parameter
var1 <- 0.05
var2 <- 0.05
var3 <- 0.05
# Define the covariances
cov12 <- sqrt(var1 * var2) * -0.2  #  negative correlation
cov13 <- sqrt(var1 * var3) * 0.1   # Weak positive correlation
cov23 <- sqrt(var2 * var3) * 0.1   # Weak positive correlation
# Construct the variance-covariance matrix
vcov_matrix <- matrix(c(var1, cov12, cov13,
cov12, var2, cov23,
cov13, cov23, var3), nrow = 3, byrow = TRUE)
# Print the matrix
# print(vcov_matrix)
## simulate random draws of the parameters
sim <- MASS::mvrnorm(1e3, mu_theta, vcov_matrix)
## vectorized function to return the associated curves for ages 1:10
waa <- function(pars){
winf = pars[1]
k = pars[2]
t0 = pars[3]
waa <- winf*(1-exp(-k*(1:10-t0)))
return(waa)
}
simwaa <- apply(sim,1,waa)
par(mfrow = c(1,2))
plot(sim[,1], sim[,2], xlab = 'Woo', ylab = 'K',
pch = 16,
main = '1000 simulated parameter draws',
col = scales::alpha('black', 0.2))
plot(1,type = 'n', xlim = c(1,10), ylim = c(0,6), xlab = 'age', ylab = 'weight', main = 'Sample weight-at-age curves'); for(i in 1:10) lines(simwaa[,i])
sim
arrange(sim, sim[,1])
dplyr::arrange(sim, sim[,1])
sort(sim)
## sort them by woo to facilitate plotting
sim[order(sim$V1),]
## sort them by woo to facilitate plotting
sim[order(sim[,1]),]
## simulate random draws of the parameters
sim <- MASS::mvrnorm(1e3, mu_theta, vcov_matrix)
## sort them by woo to facilitate plotting
sim <- sim[order(sim[,1]),]
## vectorized function to return the associated curves for ages 1:10
waa <- function(pars){
winf = pars[1]
k = pars[2]
t0 = pars[3]
waa <- winf*(1-exp(-k*(1:10-t0)))
return(waa)
}
names(sim)
## sort them by woo to facilitate plotting
sim <- data.frame(sim[order(sim[,1]),])
sim
names(sim)
winf = pars[1]
## vectorized function to return the associated curves for ages 1:10
waa <- function(pars){
winf = pars[1]
k = pars[2]
t0 = pars[3]
waa <- winf*(1-exp(-k*(1:10-t0)))
return(waa)
}
simwaa <- apply(sim,1,waa)
ggplot(sim, aes(x = X1, y = X2 )) +
geom_point()
library(ggplot2)
ggplot(sim, aes(x = X1, y = X2 )) +
geom_point()
ggplot(sim, aes(x = X1, y = X2 )) +
geom_point() +
theme_minimal()
ggplot(sim, aes(x = X1, y = X2 )) +
geom_point() +
theme_void()
ggplot(sim, aes(x = X1, y = X2 )) +
geom_point() +
ggsidekick::theme_sleek()
ggplot(sim, aes(x = X1, y = X2 )) +
geom_point() +
theme_minimal()
ggplot(sim, aes(x = X1, y = X2 )) +
geom_point() +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme_minimal()
ggplot(sim, aes(x = X1, y = X2 )) +
geom_point(alpha = 0.2, color = X1) +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme_minimal()
ggplot(sim, aes(x = X1, y = X2, color= X1 )) +
geom_point(alpha = 0.2 ) +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme_minimal()
ggplot(sim, aes(x = X1, y = X2, color= X1 )) +
geom_point(alpha = 0.2 ) +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme(legend.position = 'none')+
theme_minimal()
ggplot(sim, aes(x = X1, y = X2, color= X1 )) +
geom_point(alpha = 0.5 ) +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme(legend.position = 'none')+
theme_minimal()
ggplot(sim, aes(x = X1, y = X2, color= X1 )) +
geom_point(alpha = 0.5 ) +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot(sim, aes(x = X1, y = X2, color= X1 )) +
geom_point(alpha = 0.5, color = NA) +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot(sim, aes(x = X1, y = X2, color= X1 )) +
geom_point(alpha = 0.5, FILL = NA) +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot(sim, aes(x = X1, y = X2, color= X1 )) +
geom_point(alpha = 0.5, fill = NA) +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot(sim, aes(x = X1, y = X2, color= X1 )) +
geom_point(alpha = 0.5, color = 'white') +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot(sim, aes(x = X1, y = X2, color= X1 )) +
geom_point(alpha = 0.5) +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot(sim, aes(x = X1, y = X2, color= X1 )) +
geom_point(alpha = 0.5, stroke = NA) +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot(sim, aes(x = X1, y = X2, color= X1 )) +
geom_point(alpha = 0.5, stroke = NA, size = 2) +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot(sim, aes(x = X1, y = X2, color= X1 )) +
geom_point(alpha = 0.5, stroke = NA, size = 4) +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot(sim, aes(x = X1, y = X2, color= X1 )) +
geom_point(alpha = 0.5, stroke = NA, size = 2) +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
simwaa
reshape2::melt(simwaa) %>% head()
require(dplyr)
reshape2::melt(simwaa) %>% head()
reshape2::melt(simwaa) %>% summary()
ggplot(reshape2::melt(simwaa), aes(x = Var1, y = Var3, color= Var2 )) +
geom_line() +
labs(x = 'age', y = 'weight', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot(reshape2::melt(simwaa), aes(x = Var1, y = value, color= Var2 )) +
geom_line() +
labs(x = 'age', y = 'weight', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot(reshape2::melt(simwaa), aes(x = Var1, y = value, color= Var2, group = Var2 )) +
geom_line() +
labs(x = 'age', y = 'weight', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot(reshape2::melt(simwaa), aes(x = Var1, y = value, color= Var2, group = Var2 )) +
geom_line() +
ylim = c(0,10)+
labs(x = 'age', y = 'weight', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot(reshape2::melt(simwaa), aes(x = Var1, y = value, color= Var2, group = Var2 )) +
geom_line() +
ylim(c(0,10))+
labs(x = 'age', y = 'weight', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot(sample_n(reshape2::melt(simwaa),25), aes(x = Var1, y = value, color= Var2, group = Var2 )) +
geom_line() +
ylim(c(0,10))+
labs(x = 'age', y = 'weight', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
sample_n(reshape2::melt(simwaa),25)
?sample_n
simwaa[,runif(25,1,1000)]
ggplot( reshape2::melt(simwaa[,runif(25,1,1000)]), aes(x = Var1, y = value, color= Var2, group = Var2 )) +
geom_line() +
ylim(c(0,10))+
labs(x = 'age', y = 'weight', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot( reshape2::melt(simwaa[,runif(25,1,1000)]), aes(x = Var1, y = value, color= Var2, group = Var2 )) +
geom_line() +
ylim(c(0,6))+
labs(x = 'age', y = 'weight', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot( reshape2::melt(simwaa[,runif(25,1,1000)]), aes(x = Var1, y = value, color= Var2, group = Var2 )) +
geom_line(lwd = 2) +
ylim(c(0,6))+
labs(x = 'age', y = 'weight', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
ggplot( reshape2::melt(simwaa[,runif(25,1,1000)]), aes(x = Var1, y = value, color= Var2, group = Var2 )) +
geom_line(lwd = 1) +
ylim(c(0,6))+
labs(x = 'age', y = 'weight', title = '1000 simulated curves')+
theme_minimal()+  theme(legend.position = 'none')

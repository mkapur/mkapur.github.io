## recall that logN errors are multiplicative
# https://influentialpoints.com/Training/log_normal_confidence_intervals.htm
# recdf[b,'lci'] <- recdf[b,'detRec']+1.96*exp(SDR)
# recdf[b,'uci'] <- recdf[b,'detRec']-1.96*exp(SDR)
# C <- exp(1.96*SDR*log(recdf[b,'detRec']))
# C = 1.96*sqrt(exp(sd_log^2-1)*exp(2*mu_log+sd_log^2))
# recdf[b,'lci'] <- recdf[b,'detRec']-C ## otherwise D/C assuming D is in log space
# recdf[b,'uci'] <- recdf[b,'detRec']+C ## otherwise DC if D in log space
# Generate error values following a lognormal distribution
error_values <- rnorm(1, mean = mu_log, sd = sd_log)*exp(-sd_log^2/2)
error_values
rnorm(1, mean = mu_log, sd = sd_log)
mu_log
sd_log
## non-corrected errors around the curve
## recall that logN errors are multiplicative
# https://influentialpoints.com/Training/log_normal_confidence_intervals.htm
# recdf[b,'lci'] <- recdf[b,'detRec']+1.96*exp(SDR)
# recdf[b,'uci'] <- recdf[b,'detRec']-1.96*exp(SDR)
# C <- exp(1.96*SDR*log(recdf[b,'detRec']))
# C = 1.96*sqrt(exp(sd_log^2-1)*exp(2*mu_log+sd_log^2))
# recdf[b,'lci'] <- recdf[b,'detRec']-C ## otherwise D/C assuming D is in log space
# recdf[b,'uci'] <- recdf[b,'detRec']+C ## otherwise DC if D in log space
# Generate error values following a lognormal distribution
error_values <- rnorm(1, mean = mu_log, sd = exp(sd_log))*exp(-sd_log^2/2)
error_values
for(b in 1:100){
recdf[b,'b'] <- b
recdf[b,'detRec'] <- bh(ssb = b, h = 0.6,
r0 = 150, ssb0 = 75)
## non-corrected errors around the curve
## recall that logN errors are multiplicative
# https://influentialpoints.com/Training/log_normal_confidence_intervals.htm
# recdf[b,'lci'] <- recdf[b,'detRec']+1.96*exp(SDR)
# recdf[b,'uci'] <- recdf[b,'detRec']-1.96*exp(SDR)
# C <- exp(1.96*SDR*log(recdf[b,'detRec']))
# C = 1.96*sqrt(exp(sd_log^2-1)*exp(2*mu_log+sd_log^2))
# recdf[b,'lci'] <- recdf[b,'detRec']-C ## otherwise D/C assuming D is in log space
# recdf[b,'uci'] <- recdf[b,'detRec']+C ## otherwise DC if D in log space
# Generate error values following a lognormal distribution
error_values <- rnorm(1, mean = mu_log, sd = exp(sd_log))*exp(-sd_log^2/2)
# Calculate confidence interval
# z_value <- qnorm(1 - (1 - 0.5) / 2)
# error_multiplier <- exp(z_value * sd_log)  # Multiplier for error values
# Calculate upper and lower bounds of confidence interval
# recdf[b,'lci']  <- recdf[b,'detRec'] * error_multiplier
# recdf[b,'uci'] <- recdf[b,'detRec'] / error_multiplier
## draw from a normal distribution with mean detRec and sigma
# recdf[b,'rand'] <- ifelse(b %% 5 == 0, rnorm(1,mean = recdf[b,'detRec'], sd = SDR  ),NA)
# recdf[b,'dev'] <- recdf[b,'rand']-recdf[b,'detRec'] ## raw difference in values
# recdf[b,'corr'] <- recdf[b,'detRec']*exp( recdf[b,'dev']-SDR^2/2) ## should return rand
## draw from a normal distribution with mean detRec and sigma
# recdf[b,'dev'] <- ifelse(b %% 5 == 0, rnorm(1,mean = mu_log, sd = sd_log),NA)
# recdf[b,'corr'] <- recdf[b,'detRec']*exp(recdf[b,'dev']-sd_log^2/2)
recdf[b,'dev'] <- error_values
# recdf[b,'dev'] <- ifelse(b %% 5 == 0, rlnorm(1, meanlog = mu_log, sdlog = sd_log),NA)
recdf[b,'corr'] <- recdf[b,'detRec'] * exp(  recdf[b,'dev'] )
}
ggplot(recdf, aes(x = b, y = detRec)) +
geom_line(lwd = 1) +
theme_sleek() +
labs(x = 'SB', y = 'Recruitment')
ggplot(recdf, aes(x = b, y = detRec)) +
geom_line(lwd = 1) +
theme_sleek() +
labs(x = 'SB', y = 'Recruitment') +
geom_ribbon(aes(ymin = lci, ymax = uci), alpha = 0.2)
ggplot(recdf, aes(x = b, y = detRec)) +
geom_line(lwd = 1) +
theme_sleek() +
labs(x = 'SB', y = 'Recruitment') +
geom_ribbon(aes(ymin = lci, ymax = uci), alpha = 0.2) +
geom_point(aes(y = corr), col = 'goldenrod') +
geom_segment(aes(xend = b, yend = corr),
linetype = 'dotted')
for(b in 1:100){
recdf[b,'b'] <- b
recdf[b,'detRec'] <- bh(ssb = b, h = 0.6,
r0 = 150, ssb0 = 75)
## non-corrected errors around the curve
## recall that logN errors are multiplicative
# https://influentialpoints.com/Training/log_normal_confidence_intervals.htm
# recdf[b,'lci'] <- recdf[b,'detRec']+1.96*exp(SDR)
# recdf[b,'uci'] <- recdf[b,'detRec']-1.96*exp(SDR)
# C <- exp(1.96*SDR*log(recdf[b,'detRec']))
# C = 1.96*sqrt(exp(sd_log^2-1)*exp(2*mu_log+sd_log^2))
# recdf[b,'lci'] <- recdf[b,'detRec']-C ## otherwise D/C assuming D is in log space
# recdf[b,'uci'] <- recdf[b,'detRec']+C ## otherwise DC if D in log space
# Generate error values following a lognormal distribution
error_values <- rnorm(1, mean = mu_log, sd = exp(sd_log))*exp(-sd_log^2/2)
# Calculate confidence interval
z_value <- qnorm(1 - (1 - 0.5) / 2)
error_multiplier <- exp(z_value * sd_log)  # Multiplier for error values
# Calculate upper and lower bounds of confidence interval
recdf[b,'lci']  <- recdf[b,'detRec'] * error_multiplier
recdf[b,'uci'] <- recdf[b,'detRec'] / error_multiplier
## draw from a normal distribution with mean detRec and sigma
# recdf[b,'rand'] <- ifelse(b %% 5 == 0, rnorm(1,mean = recdf[b,'detRec'], sd = SDR  ),NA)
# recdf[b,'dev'] <- recdf[b,'rand']-recdf[b,'detRec'] ## raw difference in values
# recdf[b,'corr'] <- recdf[b,'detRec']*exp( recdf[b,'dev']-SDR^2/2) ## should return rand
## draw from a normal distribution with mean detRec and sigma
# recdf[b,'dev'] <- ifelse(b %% 5 == 0, rnorm(1,mean = mu_log, sd = sd_log),NA)
# recdf[b,'corr'] <- recdf[b,'detRec']*exp(recdf[b,'dev']-sd_log^2/2)
recdf[b,'dev'] <- error_values
# recdf[b,'dev'] <- ifelse(b %% 5 == 0, rlnorm(1, meanlog = mu_log, sdlog = sd_log),NA)
recdf[b,'corr'] <- recdf[b,'detRec'] * exp(  recdf[b,'dev'] )
}
ggplot(recdf, aes(x = b, y = detRec)) +
geom_line(lwd = 1) +
theme_sleek() +
labs(x = 'SB', y = 'Recruitment') +
geom_ribbon(aes(ymin = lci, ymax = uci), alpha = 0.2) +
geom_point(aes(y = corr), col = 'goldenrod') +
geom_segment(aes(xend = b, yend = corr),
linetype = 'dotted')
sigma = 1
mu = 0
X <- rnorm(1000,mu,sigma)
hist(X, ylim = c(0,300),
xlim = c(-5,30),
col  = alpha('grey22',0.5))
hist(exp(X), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('blue',0.5))
# abline(v =mean(X) , lty = 2, lwd = 2, col = 'grey44', add = T)
abline(v =exp(mean(X)) , lty = 2, lwd = 2, col = 'grey22', add = T )
abline(v =mean(exp(X)) , lty = 2, lwd = 2, col = 'blue', add = T )
legend('topright',
lty = 1, lwd = 5,
col = c(alpha('grey22',0.5),
alpha('blue',0.5)),
legend = c('X','exp(X)'))
sigma = 1
mu = 0
X <- rnorm(1000,mu,sigma)
hist(X, ylim = c(0,300),
xlim = c(-5,30),
col  = alpha('grey22',0.5))
hist(exp(X), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('blue',0.5))
# abline(v =mean(X) , lty = 2, lwd = 2, col = 'grey44', add = T)
abline(v =exp(mean(X)) , lty = 2, lwd = 2, col = 'grey22', add = T )
abline(v =mean(exp(X)) , lty = 2, lwd = 2, col = 'blue', add = T )
legend('topright',
lty = 1, lwd = 5,
col = c(alpha('grey22',0.5),
alpha('blue',0.5)),
legend = c('X','exp(X)'))
hist(X, ylim = c(0,300),
main = '',
xlim = c(-5,30),
col  = alpha('grey22',0.5))
sigma = 1
mu = 0
X <- rnorm(1000,mu,sigma)
hist(X, ylim = c(0,300),
main = '',
xlim = c(-5,30),
col  = alpha('grey22',0.5))
hist(exp(X), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('blue',0.5))
# abline(v =mean(X) , lty = 2, lwd = 2, col = 'grey44', add = T)
abline(v =exp(mean(X)) , lty = 2, lwd = 2, col = 'grey22', add = T )
abline(v =mean(exp(X)) , lty = 2, lwd = 2, col = 'blue', add = T )
legend('topright',
lty = 1, lwd = 5,
col = c(alpha('grey22',0.5),
alpha('blue',0.5)),
legend = c('X','exp(X)'))
sigma = 1
mu = 0
X <- rnorm(1000,mu,sigma)
hist(X, ylim = c(0,300),
main = '',
xlim = c(-5,30),
col  = alpha('grey22',0.5))
hist(exp(X), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('blue',0.5))
# abline(v =mean(X) , lty = 2, lwd = 2, col = 'grey44', add = T)
abline(v =exp(mean(X)) , lty = 2, lwd = 2, col = 'grey22', add = T )
abline(v =mean(exp(X)) , lty = 2, lwd = 2, col = 'blue', add = T )
legend('topright',
lty = 1, lwd = 5,
col = c(alpha('grey22',0.5),
alpha('blue',0.5)),
legend = c('X~N(0,1)','exp(X)'))
hist(X, ylim = c(0,300),
main = '',
xlab = '',
xlim = c(-5,30),
col  = alpha('grey22',0.5))
sigma = 1
mu = 0
X <- rnorm(1000,mu,sigma)
hist(X, ylim = c(0,300),
main = '',
xlab = '',
xlim = c(-5,30),
col  = alpha('grey22',0.5))
hist(exp(X), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('blue',0.5))
# abline(v =mean(X) , lty = 2, lwd = 2, col = 'grey44', add = T)
abline(v =exp(mean(X)) , lty = 2, lwd = 2, col = 'grey22', add = T )
abline(v =mean(exp(X)) , lty = 2, lwd = 2, col = 'blue', add = T )
legend('topright',
lty = 1, lwd = 5,
col = c(alpha('grey22',0.5),
alpha('blue',0.5)),
legend = c('X~N(0,1)','exp(X)'))
legend('topright',
lty = 1, lwd = 5,
col = c(alpha('grey22',0.5),
alpha('blue',0.5),
'grey22', 'blue'),
legend = c('X~N(0,1)','exp(X)',
'blah','bla2'))
sigma = 1
mu = 0
X <- rnorm(1000,mu,sigma)
hist(X, ylim = c(0,300),
main = '',
xlab = '',
xlim = c(-5,30),
col  = alpha('grey22',0.5))
hist(exp(X), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('blue',0.5))
abline(v =exp(mean(X)) , lty = 2, lwd = 2, col = 'grey22', add = T )
abline(v =mean(exp(X)) , lty = 2, lwd = 2, col = 'blue', add = T )
legend('topright',
lty = 1, lwd = 5,
col = c(alpha('grey22',0.5),
alpha('blue',0.5),
'grey22', 'blue'),
legend = c('X~N(0,1)','exp(X)',
'blah','bla2'))
sigma = 1
mu = 0
X <- rnorm(1000,mu,sigma)
hist(X, ylim = c(0,300),
main = '',
xlab = '',
xlim = c(-5,30),
col  = alpha('grey22',0.5))
hist(exp(X), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('blue',0.5))
abline(v =exp(mean(X)) , lty = 2, lwd = 2, col = 'grey22', add = T )
abline(v =mean(exp(X)) , lty = 2, lwd = 2, col = 'blue', add = T )
legend('topright',
lty = 1, lwd = 5,
col = c(alpha('grey22',0.5),
alpha('blue',0.5),
'grey22', 'blue'),
legend = c('X~N(0,1)','exp(X)',
'exp(mean(X))','mean(exp(X))'))
## should be close to 0
mean(X)
## should be close to 1
exp(mean(X))
## yet the mean of the blue distribution is way bigger...
mean(exp(X))
exp(mu+sigma^2/2) ##... in fact, the expected value of exp(X) is ~exp(mu+sigma/2)
ggplot(recdf, aes(x = b, y = detRec)) +
geom_line(lwd = 1) +
theme_sleek() +
labs(x = 'SB', y = 'Recruitment') +
# geom_ribbon(aes(ymin = lci, ymax = uci), alpha = 0.2) +
geom_point(aes(y = corr), col = 'goldenrod') +
geom_segment(aes(xend = b, yend = corr),
linetype = 'dotted')
sigma = 1
mu = 0
X <- rnorm(1000,mu,sigma)
hist(X, ylim = c(0,300),
main = '',
xlab = '',
xlim = c(-5,30),
col  = alpha('grey22',0.5))
hist(exp(X), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('blue',0.5))
abline(v =exp(mean(X)) , lty = 2, lwd = 2, col = 'grey22', add = T )
abline(v =mean(exp(X)) , lty = 2, lwd = 2, col = 'blue', add = T )
legend('topright',
lty = 1, lwd = 5,
col = c(alpha('grey22',0.5),
alpha('blue',0.5),
'grey22', 'blue'),
legend = c('X~N(0,1)','Y = exp(X)',
'exp(mean(X))','mean(Y)'))
hist(X, ylim = c(0,500),
xlim = c(-5,30),
col  = alpha('grey22',0.5))
hist(exp(X), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('blue',0.5))
hist(exp(X-1^2/2), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('red',0.5))
legend('topright',
lty = 1, lwd = 5,
col = c(alpha('grey22',0.5),
alpha('blue',0.5),
alpha('red',0.5)),
legend = c('X','exp(X)', 'bias correction!'))
hist(X, ylim = c(0,500),
xlim = c(-5,30),
col  = alpha('grey22',0.5))
hist(exp(X), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('blue',0.5))
hist(exp(X-sigma^2/2), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('red',0.5))
legend('topright',
lty = 1, lwd = 5,
col = c(alpha('grey22',0.5),
alpha('blue',0.5),
alpha('red',0.5)),
legend = c('X','exp(X)', 'bias correction!'))
## as above, the mean is close to 1 without adjustment
exp(mean(X))
## ...though the actual mean is greater, by a factor of sigma^2/2
mean(exp(X))
mean(exp(X-1^2/2)) ## with bias correction, closer to 1 again!
require(dplyr)
recdfsamp <-
sample_n(data.frame(recdf[!is.na(recdf$dev),]),
size = nrow(recdf[!is.na(recdf$dev),]),
replace = TRUE) %>%
mutate(Year = 1:nrow(recdf[!is.na(recdf$dev),]))
ggplot(recdfsamp, aes(x = Year, y = dev)) +
theme_sleek() +
labs(x = 'Year', y = 'log Recruitment deviation') +
geom_point() +
geom_line(linetype = 'dotted') +
# geom_segment(aes(xend = Year, yend = 0),linetype = 'dotted') +
geom_hline(yintercept = 0)
recdf
for(b in 1:100){
recdf[b,'b'] <- b
recdf[b,'detRec'] <- bh(ssb = b, h = 0.6,
r0 = 150, ssb0 = 75)
## non-corrected errors around the curve
## recall that logN errors are multiplicative
# https://influentialpoints.com/Training/log_normal_confidence_intervals.htm
# recdf[b,'lci'] <- recdf[b,'detRec']+1.96*exp(SDR)
# recdf[b,'uci'] <- recdf[b,'detRec']-1.96*exp(SDR)
# C <- exp(1.96*SDR*log(recdf[b,'detRec']))
# C = 1.96*sqrt(exp(sd_log^2-1)*exp(2*mu_log+sd_log^2))
# recdf[b,'lci'] <- recdf[b,'detRec']-C ## otherwise D/C assuming D is in log space
# recdf[b,'uci'] <- recdf[b,'detRec']+C ## otherwise DC if D in log space
# Generate error values following a lognormal distribution
error_values <- rnorm(1, mean = mu_log, sd = exp(sd_log))*exp(-sd_log^2/2)
unadjusted_error_values <- error_values/exp(-sd_log^2/2)
# Calculate confidence interval
z_value <- qnorm(1 - (1 - 0.5) / 2)
error_multiplier <- exp(z_value * sd_log)  # Multiplier for error values
# Calculate upper and lower bounds of confidence interval
recdf[b,'lci']  <- recdf[b,'detRec'] * error_multiplier
recdf[b,'uci'] <- recdf[b,'detRec'] / error_multiplier
## draw from a normal distribution with mean detRec and sigma
# recdf[b,'rand'] <- ifelse(b %% 5 == 0, rnorm(1,mean = recdf[b,'detRec'], sd = SDR  ),NA)
# recdf[b,'dev'] <- recdf[b,'rand']-recdf[b,'detRec'] ## raw difference in values
# recdf[b,'corr'] <- recdf[b,'detRec']*exp( recdf[b,'dev']-SDR^2/2) ## should return rand
## draw from a normal distribution with mean detRec and sigma
# recdf[b,'dev'] <- ifelse(b %% 5 == 0, rnorm(1,mean = mu_log, sd = sd_log),NA)
# recdf[b,'corr'] <- recdf[b,'detRec']*exp(recdf[b,'dev']-sd_log^2/2)
recdf[b,'dev'] <- error_values
recdf[b,'dev_wrong'] <- unadjusted_error_values
# recdf[b,'dev'] <- ifelse(b %% 5 == 0, rlnorm(1, meanlog = mu_log, sdlog = sd_log),NA)
recdf[b,'corr'] <- recdf[b,'detRec'] * exp(  recdf[b,'dev'] )
}
recdfsamp
recdfsamp <-
sample_n(data.frame(recdf[!is.na(recdf$dev),]),
size = nrow(recdf[!is.na(recdf$dev),]),
replace = TRUE) %>%
mutate(Year = 1:nrow(recdf[!is.na(recdf$dev),]))
recdfsamp <-
sample_n(data.frame(recdf[!is.na(recdf$dev),]),
size = nrow(recdf[!is.na(recdf$dev),]),
replace = TRUE) %>%
mutate(Year = 1:nrow(recdf[!is.na(recdf$dev),]))
recdfsamp
ggplot(recdfsamp, aes(x = Year)) +
theme_sleek() +
labs(x = 'Year', y = 'log Recruitment deviation') +
geom_point(aes(y = dev)) +
geom_line(linetype = 'dotted') +
# geom_segment(aes(xend = Year, yend = 0),linetype = 'dotted') +
geom_hline(yintercept = 0)
recdfsamp
ggplot(recdfsamp, aes(x = Year)) +
theme_sleek() +
labs(x = 'Year', y = 'log Recruitment deviation') +
geom_point(aes(y = dev))
ggplot(recdfsamp, aes(x = Year)) +
theme_sleek() +
labs(x = 'Year', y = 'log Recruitment deviation') +
geom_point(aes(y = dev)) +
geom_line(linetype = 'dotted') +
# geom_segment(aes(xend = Year, yend = 0),linetype = 'dotted') +
geom_hline(yintercept = 0)
ggplot(recdfsamp, aes(x = Year)) +
theme_sleek() +
labs(x = 'Year', y = 'log Recruitment deviation') +
geom_point(aes(y = dev)) +
geom_line(linetype = 'dotted', aes(y = dev)) +
# geom_segment(aes(xend = Year, yend = 0),linetype = 'dotted') +
geom_hline(yintercept = 0)
ggplot(recdfsamp, aes(x = Year)) +
theme_sleek() +
labs(x = 'Year', y = 'log Recruitment deviation') +
geom_point(aes(y = dev_wrong), color = 'red') +
geom_point(aes(y = dev)) +
geom_line(linetype = 'dotted', aes(y = dev)) +
# geom_segment(aes(xend = Year, yend = 0),linetype = 'dotted') +
geom_hline(yintercept = 0)
mean(recdfsamp$dev)
mean(recdfsamp$dev); mean(recdfsamp$dev_wrong)
for(b in 1:100){
recdf[b,'b'] <- b
recdf[b,'detRec'] <- bh(ssb = b, h = 0.6,
r0 = 150, ssb0 = 75)
## non-corrected errors around the curve
## recall that logN errors are multiplicative
# https://influentialpoints.com/Training/log_normal_confidence_intervals.htm
# recdf[b,'lci'] <- recdf[b,'detRec']+1.96*exp(SDR)
# recdf[b,'uci'] <- recdf[b,'detRec']-1.96*exp(SDR)
# C <- exp(1.96*SDR*log(recdf[b,'detRec']))
# C = 1.96*sqrt(exp(sd_log^2-1)*exp(2*mu_log+sd_log^2))
# recdf[b,'lci'] <- recdf[b,'detRec']-C ## otherwise D/C assuming D is in log space
# recdf[b,'uci'] <- recdf[b,'detRec']+C ## otherwise DC if D in log space
# Generate error values following a lognormal distribution
dev_raw<- rnorm(1, mean = mu_log, sd = exp(sd_log))
error_values <- dev_raw*exp(-sd_log^2/2)
unadjusted_error_values <- dev_raw
# Calculate confidence interval
z_value <- qnorm(1 - (1 - 0.5) / 2)
error_multiplier <- exp(z_value * sd_log)  # Multiplier for error values
# Calculate upper and lower bounds of confidence interval
recdf[b,'lci']  <- recdf[b,'detRec'] * error_multiplier
recdf[b,'uci'] <- recdf[b,'detRec'] / error_multiplier
## draw from a normal distribution with mean detRec and sigma
# recdf[b,'rand'] <- ifelse(b %% 5 == 0, rnorm(1,mean = recdf[b,'detRec'], sd = SDR  ),NA)
# recdf[b,'dev'] <- recdf[b,'rand']-recdf[b,'detRec'] ## raw difference in values
# recdf[b,'corr'] <- recdf[b,'detRec']*exp( recdf[b,'dev']-SDR^2/2) ## should return rand
## draw from a normal distribution with mean detRec and sigma
# recdf[b,'dev'] <- ifelse(b %% 5 == 0, rnorm(1,mean = mu_log, sd = sd_log),NA)
# recdf[b,'corr'] <- recdf[b,'detRec']*exp(recdf[b,'dev']-sd_log^2/2)
recdf[b,'dev'] <- error_values
recdf[b,'dev_wrong'] <- unadjusted_error_values
# recdf[b,'dev'] <- ifelse(b %% 5 == 0, rlnorm(1, meanlog = mu_log, sdlog = sd_log),NA)
recdf[b,'corr'] <- recdf[b,'detRec'] * exp(  recdf[b,'dev'] )
}
recdfsamp <-
sample_n(data.frame(recdf[!is.na(recdf$dev),]),
size = nrow(recdf[!is.na(recdf$dev),]),
replace = TRUE) %>%
mutate(Year = 1:nrow(recdf[!is.na(recdf$dev),]))
ggplot(recdfsamp, aes(x = Year)) +
theme_sleek() +
labs(x = 'Year', y = 'log Recruitment deviation') +
geom_point(aes(y = dev_wrong), color = 'red') +
geom_point(aes(y = dev)) +
geom_line(linetype = 'dotted', aes(y = dev)) +
# geom_segment(aes(xend = Year, yend = 0),linetype = 'dotted') +
geom_hline(yintercept = 0)
mean(recdfsamp$dev); mean(recdfsamp$dev_wrong)
hist(X, ylim = c(0,500),
xlim = c(-5,30),
xlab = '',
col  = alpha('grey22',0.5))
hist(exp(X), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('blue',0.5))
hist(exp(X-sigma^2/2), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('red',0.5))
legend('topright',
lty = 1, lwd = 5,
col = c(alpha('grey22',0.5),
alpha('blue',0.5),
alpha('red',0.5)),
legend = c('X~N(0,1)','Y=exp(X)', 'Bias Adjustment'))
hist(X, ylim = c(0,500),
xlim = c(-5,30),
xlab = '',
main = '',
col  = alpha('grey22',0.5))
hist(exp(X), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('blue',0.5))
hist(exp(X-sigma^2/2), add = TRUE,
breaks = seq(0,100,0.5),
col = alpha('red',0.5))
legend('topright',
lty = 1, lwd = 5,
col = c(alpha('grey22',0.5),
alpha('blue',0.5),
alpha('red',0.5)),
legend = c('X~N(0,1)','Y=exp(X)', 'Bias Adjustment'))
doParallel::detectCores()
?detectCores
parallel::detectCores()
sqrt(1)

theme_minimal() +
theme(legend.position = 'none')
library(ggplot2)
library(RMISC)
library(ggplot2)
library(Rmisc)
## sort them by woo to facilitate plotting
sim <- data.frame(sim[order(sim[,1]),])
## vectorized function to return the associated curves for ages 1:10
waa <- function(pars){
winf = pars[1]
k = pars[2]
t0 = pars[3]
waa <- winf*(1-exp(-k*(1:10-t0)))
return(waa)
}
simwaa <- apply(sim,1,waa)
p1 <- ggplot(sim, aes(x = X1, y = X2, color= X1 )) +
geom_point(alpha = 0.5, stroke = NA, size = 2) +
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
p2 <- ggplot( reshape2::melt(simwaa[,runif(25,1,1000)]), aes(x = Var1, y = value, color= Var2, group = Var2 )) +
geom_line(lwd = 1) +
ylim(c(0,6))+
labs(x = 'age', y = 'weight', title = '1000 simulated curves')+
theme_minimal()+  theme(legend.position = 'none')
Rmisc::multiplot(plotlist = list(p1,p2))
Rmisc::multiplot(plotlist = list(p1,p2), cols = 2)
ggplot( reshape2::melt(simwaa[,runif(25,1,1000)]), aes(x = Var1, y = value, color= Var2, group = Var2 )) +
geom_line(lwd = 1) +
ylim(c(0,6))+
scale_color_viridis_c()+
labs(x = 'age', y = 'weight', title = '1000 simulated curves')+
theme_minimal()+  theme(legend.position = 'none')
library(ggplot2)
library(Rmisc)
## sort them by woo to facilitate plotting
sim <- data.frame(sim[order(sim[,1]),])
## vectorized function to return the associated curves for ages 1:10
waa <- function(pars){
winf = pars[1]
k = pars[2]
t0 = pars[3]
waa <- winf*(1-exp(-k*(1:10-t0)))
return(waa)
}
simwaa <- apply(sim,1,waa)
p1 <- ggplot(sim, aes(x = X1, y = X2, color= X1 )) +
geom_point(alpha = 0.5, stroke = NA, size = 2) +
scale_color_viridis_c()+
labs(x = 'Woo', y = 'k', title = '1000 simulated parameter draws')+
theme_minimal()+  theme(legend.position = 'none')
p2 <- ggplot( reshape2::melt(simwaa[,runif(25,1,1000)]), aes(x = Var1, y = value, color= Var2, group = Var2 )) +
geom_line(lwd = 1) +
ylim(c(0,6))+
scale_color_viridis_c()+
labs(x = 'age', y = 'weight', title = '1000 simulated curves')+
theme_minimal()+  theme(legend.position = 'none')
Rmisc::multiplot(plotlist = list(p1,p2), cols = 2)
p2 <- ggplot(sim2, aes(x = X1, y = X2, color= X1  )) +
scale_color_viridis_c()+
geom_density_2d(data = sim2[sim2$X4<0.5 & sim2$X4>1,], aes(z= X4), alpha = 0.7, color = 'red')+
geom_point(alpha = 1, stroke = NA, size = 2) +
geom_point(data = sim2[sim2$X4>0.5 & sim2$X4<1,],stroke = NA,  color = 'red') +
labs(x = 'Woo', y = 'k',
title = paste0('Option 2: Finding low-probability parameter combinations '))+
theme_minimal() +
theme(legend.position = 'none')
p2
p2 <- ggplot( reshape2::melt(simwaa[,runif(25,1,1000)]), aes(x = Var1, y = value, color= Var2, group = Var2 )) +
geom_line(lwd = 1) +
ylim(c(0,6))+
scale_color_viridis_c()+
labs(x = 'age', y = 'weight', title = '1000 simulated curves')+
theme_minimal()+  theme(legend.position = 'none')
p2
p2 <- ggplot( reshape2::melt(simwaa[,runif(10,1,1000)]), aes(x = Var1, y = value, color= Var2, group = Var2 )) +
geom_line(lwd = 1) +
ylim(c(0,6))+
scale_color_viridis_c()+
labs(x = 'age', y = 'weight', title = '1000 simulated curves')+
theme_minimal()+  theme(legend.position = 'none')
p2
p2 <- ggplot(sim2, aes(x = X1, y = X2, color= X1  )) +
scale_color_viridis_c()+
geom_density_2d(data = sim2[sim2$X4<0.5 & sim2$X4>1,], aes(z= X4), alpha = 0.7, color = 'red')+
geom_point(alpha = 1, stroke = NA, size = 2) +
geom_point(data = sim2[sim2$X4>0.5 & sim2$X4<1,],stroke = NA,  color = 'red') +
labs(x = 'Woo', y = 'k',
title = paste0('Option 2: Finding low-probability parameter combinations '))+
theme_minimal() +
theme(legend.position = 'none')
p2
ggsave(p2,
file = 'Loo_K_covariance_prob.png',
width = 3, height =3, unit = 'in')
p2 <- ggplot( reshape2::melt(simwaa[,runif(10,1,1000)]), aes(x = Var1, y = value, color= Var2, group = Var2 )) +
geom_line(lwd = 1) +
ylim(c(0,6))+
scale_color_viridis_c()+
labs(x = 'age', y = 'weight', title = 'Simulated curves')+
theme_minimal()+  theme(legend.position = 'none')
ggsave(p2,
file = 'curves.png',
width = 3, height =3, unit = 'in')
ggsave(p2,
file = 'curves.png',
width = 3, height =3, unit = 'in')
knitr::include_graphics("process.png")
# knitr::include_graphics("process.png")
![](process.png)
?Rmisc::multiplot
p2 <- ggplot(sim2, aes(x = X1, y = X2, color= X1  )) +
scale_color_viridis_c()+
geom_density_2d(data = sim2[sim2$X4<0.5 & sim2$X4>1,], aes(z= X4), alpha = 0.7, color = 'red')+
geom_point(alpha = 1, stroke = NA, size = 2) +
geom_point(data = sim2[sim2$X4>0.5 & sim2$X4<1,],stroke = NA,  color = 'red') +
labs(x = 'Woo', y = 'k',
title = paste0('Option 2: Finding low-probability parameter combinations '))+
theme_minimal() +
theme(legend.position = 'none',
title = element_text(size = 3)
)
p2
p2 <- ggplot(sim2, aes(x = X1, y = X2, color= X1  )) +
scale_color_viridis_c()+
geom_density_2d(data = sim2[sim2$X4<0.5 & sim2$X4>1,], aes(z= X4), alpha = 0.7, color = 'red')+
geom_point(alpha = 1, stroke = NA, size = 2) +
geom_point(data = sim2[sim2$X4>0.5 & sim2$X4<1,],stroke = NA,  color = 'red') +
labs(x = 'Woo', y = 'k',
title = paste0('Option 2: Finding low-probability parameter combinations '))+
theme_minimal() +
theme(legend.position = 'none',
title = element_text(size = 8)
)
Rmisc::multiplot(plotlist = list(p1,p2), cols = 2)
p2 <- ggplot(sim2, aes(x = X1, y = X2, color= X1  )) +
scale_color_viridis_c()+
geom_density_2d(data = sim2[sim2$X4<0.5 & sim2$X4>1,], aes(z= X4), alpha = 0.7, color = 'red')+
geom_point(alpha = 1, stroke = NA, size = 2) +
geom_point(data = sim2[sim2$X4>0.5 & sim2$X4<1,],stroke = NA,  color = 'red') +
labs(x = 'Woo', y = 'k',
title = paste0('Option 2: Finding low-probability parameter combinations '))+
theme_minimal() +
theme(legend.position = 'none',
title = element_text(size = 5)
)
Rmisc::multiplot(plotlist = list(p1,p2), cols = 2)
p2 <- ggplot(sim2, aes(x = X1, y = X2, color= X1  )) +
scale_color_viridis_c()+
geom_density_2d(data = sim2[sim2$X4<0.5 & sim2$X4>1,], aes(z= X4), alpha = 0.7, color = 'red')+
geom_point(alpha = 1, stroke = NA, size = 2) +
geom_point(data = sim2[sim2$X4>0.5 & sim2$X4<1,],stroke = NA,  color = 'red') +
labs(x = 'Woo', y = 'k',
title = paste0('Option 2: Finding low-probability parameter combinations '))+
theme_minimal() +
theme(legend.position = 'none',
title = element_text(size = 6)
)
Rmisc::multiplot(plotlist = list(p1,p2), cols = 2)
## Standalone Script to build and save the climate scenarios
## 1 totally static
## 2 time only: climate drifts upward
## 3 space only: static patchiness
## 4 spatio-temporal: things change year to year
pars_sims <- matrix(c(0,0,0.5,0,5,0,5,1),ncol = 2, byrow = TRUE) ## sigma, phi by scenario
border_mat <- matrix(c(5,0,0,5,0,0,5,5),ncol = 2, byrow = FALSE) ## domain
sims <- data.frame()
for(isim in 1:4){
for(timestep in 1:100){
phi_value <- ifelse(isim <3,0,1)
sigma_value <- ifelse(isim <3,0,5)
mean_value <- ifelse(isim == 2,log(timestep),0)
if(isim == 3){ set.seed(731)} else{set.seed(seed = NULL)} ## induce annual var for #4
tmp <- grf(1e3, grid = 'reg',
mean = mean_value,
cov.pars=c(phi_value,sigma_value),
# cov.pars = pars_sims[isim,],
borders = border_mat)
sims <- bind_rows(sims, data.frame(tmp$coords,tmp$data) %>%
mutate(X1 = round(X1,2),
X2 = round(X2,2),
cellid = seq(length(sim1$data)),
timestep,
simID = isim))
# assign(value = tmp, x =paste0('sim',isim, timestep))
} ## end timestep
} ## end isim
?grf
??grf
library('geoR')
## Standalone Script to build and save the climate scenarios
## 1 totally static
## 2 time only: climate drifts upward
## 3 space only: static patchiness
## 4 spatio-temporal: things change year to year
pars_sims <- matrix(c(0,0,0.5,0,5,0,5,1),ncol = 2, byrow = TRUE) ## sigma, phi by scenario
border_mat <- matrix(c(5,0,0,5,0,0,5,5),ncol = 2, byrow = FALSE) ## domain
sims <- data.frame()
for(isim in 1:4){
for(timestep in 1:100){
phi_value <- ifelse(isim <3,0,1)
sigma_value <- ifelse(isim <3,0,5)
mean_value <- ifelse(isim == 2,log(timestep),0)
if(isim == 3){ set.seed(731)} else{set.seed(seed = NULL)} ## induce annual var for #4
tmp <- grf(1e3, grid = 'reg',
mean = mean_value,
cov.pars=c(phi_value,sigma_value),
# cov.pars = pars_sims[isim,],
borders = border_mat)
sims <- bind_rows(sims, data.frame(tmp$coords,tmp$data) %>%
mutate(X1 = round(X1,2),
X2 = round(X2,2),
cellid = seq(length(sim1$data)),
timestep,
simID = isim))
# assign(value = tmp, x =paste0('sim',isim, timestep))
} ## end timestep
} ## end isim
library(dplyr)
sims <- data.frame()
for(isim in 1:4){
for(timestep in 1:100){
phi_value <- ifelse(isim <3,0,1)
sigma_value <- ifelse(isim <3,0,5)
mean_value <- ifelse(isim == 2,log(timestep),0)
if(isim == 3){ set.seed(731)} else{set.seed(seed = NULL)} ## induce annual var for #4
tmp <- grf(1e3, grid = 'reg',
mean = mean_value,
cov.pars=c(phi_value,sigma_value),
# cov.pars = pars_sims[isim,],
borders = border_mat)
sims <- bind_rows(sims, data.frame(tmp$coords,tmp$data) %>%
mutate(X1 = round(X1,2),
X2 = round(X2,2),
cellid = seq(length(sim1$data)),
timestep,
simID = isim))
# assign(value = tmp, x =paste0('sim',isim, timestep))
} ## end timestep
} ## end isim
## Standalone Script to build and save the climate scenarios
## 1 totally static
## 2 time only: climate drifts upward
## 3 space only: static patchiness
## 4 spatio-temporal: things change year to year
pars_sims <- matrix(c(0,0,0.5,0,5,0,5,1),ncol = 2, byrow = TRUE) ## sigma, phi by scenario
border_mat <- matrix(c(5,0,0,5,0,0,5,5),ncol = 2, byrow = FALSE) ## domain
sims <- data.frame()
for(isim in 1:4){
for(timestep in 1:100){
phi_value <- ifelse(isim <3,0,1)
sigma_value <- ifelse(isim <3,0,5)
mean_value <- ifelse(isim == 2,log(timestep),0)
if(isim == 3){ set.seed(731)} else{set.seed(seed = NULL)} ## induce annual var for #4
tmp <- grf(1e3, grid = 'reg',
mean = mean_value,
cov.pars=c(phi_value,sigma_value),
# cov.pars = pars_sims[isim,],
borders = border_mat)
sims <- bind_rows(sims, data.frame(tmp$coords,tmp$data) %>%
mutate(X1 = round(X1,2),
X2 = round(X2,2),
cellid = seq(length(sim1$data)),
timestep,
simID = isim))
# assign(value = tmp, x =paste0('sim',isim, timestep))
} ## end timestep
} ## end isim
sims <- data.frame()
for(isim in 1:4){
for(timestep in 1:100){
phi_value <- ifelse(isim <3,0,1)
sigma_value <- ifelse(isim <3,0,5)
mean_value <- ifelse(isim == 2,log(timestep),0)
if(isim == 3){ set.seed(731)} else{set.seed(seed = NULL)} ## induce annual var for #4
tmp <- grf(1e3, grid = 'reg',
mean = mean_value,
cov.pars=c(phi_value,sigma_value),
# cov.pars = pars_sims[isim,],
borders = border_mat)
sims <- bind_rows(sims, data.frame(tmp$coords,tmp$data) %>%
mutate(X1 = round(X1,2),
X2 = round(X2,2),
cellid = seq(length(tmp$data)),
timestep,
simID = isim))
# assign(value = tmp, x =paste0('sim',isim, timestep))
} ## end timestep
} ## end isim
pars_sims
border_mat
pars_sims <- matrix(5,1,ncol = 2, byrow = TRUE) ## sigma, phi by scenario
border_mat <- matrix(5,5,ncol = 2, byrow = FALSE) ## domain
tmp <- grf(1e3, grid = 'reg',
mean = 0,
cov.pars=c(5,1),
# cov.pars = pars_sims[isim,],
borders = border_mat)
tmp <- grf(1e3, grid = 'reg',
mean = 0,
cov.pars=c(5,1),
# cov.pars = pars_sims[isim,],
borders = c(5,5))
tmp <- grf(1e3, grid = 'reg',
mean = 0,
cov.pars=c(5,1))
plot(tmp)
sims = tmp
## visualize outputs
sims$X1 <- factor(sims$X1)
sims$X2 <- factor(sims$X2)
ggplot(subset(sims, timestep <5), aes(x = X1, y= X2, fill = tmp.data, color =tmp.data)) +
geom_raster()+
coord_equal() +
scale_color_viridis_c()+
scale_fill_viridis_c()+
facet_grid(simID~timestep) +
theme_void() +
# geom_point(data=subset(sims, cellid %in% stations),
# pch = 4, color = '#2b9288', size = 3) +
scale_y_discrete(expand = c(0,0))+
scale_x_discrete(expand = c(0,0))+
theme(legend.position = 'none', strip.text = element_blank())
sims
tmp <- grf(1e3, grid = 'reg',
mean = 0,
cov.pars=c(5,1))
## visualize outputs
sims$X1 <- factor(sims$X1)
ggplot(subset(sims, timestep <5), aes(x = X1, y= X2, fill = tmp.data, color =tmp.data)) +
geom_raster()+
coord_equal() +
scale_color_viridis_c()+
scale_fill_viridis_c()+
facet_grid(simID~timestep) +
theme_void() +
# geom_point(data=subset(sims, cellid %in% stations),
# pch = 4, color = '#2b9288', size = 3) +
scale_y_discrete(expand = c(0,0))+
scale_x_discrete(expand = c(0,0))+
theme(legend.position = 'none', strip.text = element_blank())
sims
ggplot(sims, aes(x = X1, y= X2, fill = tmp.data, color =tmp.data)) +
geom_raster()+
coord_equal() +
scale_color_viridis_c()+
scale_fill_viridis_c()+
facet_grid(simID~timestep) +
theme_void() +
# geom_point(data=subset(sims, cellid %in% stations),
# pch = 4, color = '#2b9288', size = 3) +
scale_y_discrete(expand = c(0,0))+
scale_x_discrete(expand = c(0,0))+
theme(legend.position = 'none', strip.text = element_blank())
head(sims)
sims <-  data.frame(tmp$coords,tmp$data) %>%
mutate(X1 = round(X1,2),
X2 = round(X2,2),
cellid = seq(length(tmp$data)),
timestep,
simID = isim))
tmp <- grf(1e3, grid = 'reg',
mean = 0,
cov.pars=c(5,1))
tmp <- grf(1e3, grid = 'reg',
mean = 0,
cov.pars=c(5,1))
sims <-  data.frame(tmp$coords,tmp$data) %>%
mutate(X1 = round(X1,2),
X2 = round(X2,2),
cellid = seq(length(tmp$data)))
head(data.frame(tmp$coords,tmp$data))
sims = tmp
## visualize outputs
sims$X1 <- factor(sims$x)
sims$X2 <- factor(sims$y)
ggplot(sims, aes(x = X1, y= X2, fill = tmp.data, color =tmp.data)) +
geom_raster()+
coord_equal() +
scale_color_viridis_c()+
scale_fill_viridis_c()+
facet_grid(simID~timestep) +
theme_void() +
# geom_point(data=subset(sims, cellid %in% stations),
# pch = 4, color = '#2b9288', size = 3) +
scale_y_discrete(expand = c(0,0))+
scale_x_discrete(expand = c(0,0))+
theme(legend.position = 'none', strip.text = element_blank())
class(sims)
data.frame(tmp)
# cov.pars = pars_sims[isim,] )
sims = data.frame(tmp)
## visualize outputs
sims$X1 <- factor(sims$x)
ggplot(sims, aes(x = X1, y= X2, fill = tmp.data, color =tmp.data)) +
geom_raster()+
coord_equal() +
scale_color_viridis_c()+
scale_fill_viridis_c()+
facet_grid(simID~timestep) +
theme_void() +
# geom_point(data=subset(sims, cellid %in% stations),
# pch = 4, color = '#2b9288', size = 3) +
scale_y_discrete(expand = c(0,0))+
scale_x_discrete(expand = c(0,0))+
theme(legend.position = 'none', strip.text = element_blank())
ggplot(sims, aes(x = X1, y= X2, fill = tmp.data, color =tmp.data)) +
geom_raster()+
coord_equal() +
scale_color_viridis_c()+
scale_fill_viridis_c()+
theme_void() +
# geom_point(data=subset(sims, cellid %in% stations),
# pch = 4, color = '#2b9288', size = 3) +
scale_y_discrete(expand = c(0,0))+
scale_x_discrete(expand = c(0,0))+
theme(legend.position = 'none', strip.text = element_blank())
## visualize outputs
sims$X1 <- factor(sims$x)
ggplot(sims, aes(x = X1, y= X2, fill = tmp.data, color =tmp.data)) +
geom_raster()+
coord_equal() +
scale_color_viridis_c()+
scale_fill_viridis_c()+
theme_void() +
# geom_point(data=subset(sims, cellid %in% stations),
# pch = 4, color = '#2b9288', size = 3) +
scale_y_discrete(expand = c(0,0))+
scale_x_discrete(expand = c(0,0))+
theme(legend.position = 'none', strip.text = element_blank())
HEAD(SIMS)
head(sims)
# cov.pars = pars_sims[isim,] )
sims = data.frame(tmp)
tmp <- grf(1e3, grid = 'reg',
mean = 0,
cov.pars=c(5,1))
tmp <- grf(1e3, grid = 'reg',
mean = 0,
cov.pars=c(5,1))
# cov.pars = pars_sims[isim,] )
sims = data.frame(tmp)
ggplot(sims, aes(x = factor(x), y= factor(y), fill = data, color =tmp.data)) +
geom_raster()+
coord_equal() +
scale_color_viridis_c()+
scale_fill_viridis_c()+
theme_void() +
# geom_point(data=subset(sims, cellid %in% stations),
# pch = 4, color = '#2b9288', size = 3) +
scale_y_discrete(expand = c(0,0))+
scale_x_discrete(expand = c(0,0))+
theme(legend.position = 'none', strip.text = element_blank())
ggplot(sims, aes(x = factor(x), y= factor(y), fill = data, color =data)) +
geom_raster()+
coord_equal() +
scale_color_viridis_c()+
scale_fill_viridis_c()+
theme_void() +
# geom_point(data=subset(sims, cellid %in% stations),
# pch = 4, color = '#2b9288', size = 3) +
scale_y_discrete(expand = c(0,0))+
scale_x_discrete(expand = c(0,0))+
theme(legend.position = 'none', strip.text = element_blank())
tmp <- grf(1e3, grid = 'reg',
mean = 0,
cov.pars=c(5,1),
borders = border_mat)
border_mat <- matrix(c(5,0,0,5,0,0,5,5),ncol = 2, byrow = FALSE) ## domain
tmp <- grf(1e3, grid = 'reg',
mean = 0,
cov.pars=c(5,1),
borders = border_mat)
# cov.pars = pars_sims[isim,] )
sims = data.frame(tmp)
ggplot(sims, aes(x = factor(x), y= factor(y), fill = data, color =data)) +
geom_raster()+
coord_equal() +
scale_color_viridis_c()+
scale_fill_viridis_c()+
theme_void() +
scale_y_discrete(expand = c(0,0))+
scale_x_discrete(expand = c(0,0))+
theme(legend.position = 'none', strip.text = element_blank())
head(sims)
ggplot(sims, aes(x = factor(X1), y= factor(X2), fill = data, color =data)) +
geom_raster()+
coord_equal() +
scale_color_viridis_c()+
scale_fill_viridis_c()+
theme_void() +
scale_y_discrete(expand = c(0,0))+
scale_x_discrete(expand = c(0,0))+
theme(legend.position = 'none', strip.text = element_blank())
dnorm(0,0,1)
pnorm(0,0,1)
qnorm(0,0,1)
qnorm(0.5,0,1)
blogdown::build_site()
library(ggsidekick)
devtools::install_github("seananderson/ggsidekick")
readRDS("C/USERS/MAIA.KAPUR/DOCUMENTS/mypks.rds")
readRDS("C:/USERS/MAIA.KAPUR/DOCUMENTS/mypks.rds")
devtools::install_github("seananderson/ggsidekick")
credentials::set_github_pat()
devtools::install_github("seananderson/ggsidekick")
3/85
blogdown::build_site()
install.packages('blogdown')
blogdown::build_site()
blogdown::render_site()
